#!/usr/bin/python

import os
import sys
import copy
import yaml
import psutil
from termcolor import colored
import grabbr
import grabbr.db
import grabbr.tools

config = {
    'pid_file': '/var/run/grabbr/pid',
    'module_dir': '/srv/grabbr-plugins',
    'force': False,
    'random_sleep': False,
    'headers': {
        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.47 Safari/536.11',
    },
}
config['already_running'] = True
if not os.path.exists(config['pid_file']):
    config['already_running'] = False
    with open(config['pid_file'], 'w') as pfh:
        pfh.write(str(os.getpid()))
    pfh.close()

with open('/etc/grabbr/grabbr', 'r') as ifh:
    config.update(yaml.safe_load(ifh.read()))

if not os.path.exists(config['module_dir']):
    os.makedirs(config['module_dir'])

dbclient = grabbr.db.client(config)

CLI_ARGS = [
    '-f', '--force',
    '-r', '--random-sleep',
    '-l', '--list-queue',
    '-s', '--single',
    '-i', '--include',
]

urls = copy.copy(sys.argv[1:])

if '--force' in urls or '-f' in urls:
    config['force'] = True

if '--random-sleep' in urls or '-r' in urls:
    config['random_sleep'] = True

if '--list-queue' in urls or '-l' in urls:
    grabbr.db.list_queue(dbclient, config)

if '--single' in urls or '-s' in urls:
    config['single'] = True

if '--include' in urls or '-i' in urls:
    config['include_headers'] = True

modules = grabbr.loader(config, urls, dbclient)

if not config['already_running'] or config.get('single') is True:
    while len(urls) > 0:
        url_id = None
        url = urls.pop(0)
        if url in CLI_ARGS:
            continue
        filtered = False
        for mod in modules:
            if filtered is True:
                break
            if not mod.endswith('.pre_flight'):
                continue
            url_id, url, content = modules[mod](url)
            filtered = True
        if url_id is None:
            url_id, content = grabbr.tools.get_url(
                url, dbclient=dbclient, config=config
            )
        grabbr.tools.process_url(url_id, url, content, modules, config)
        if len(urls) < 1:
            grabbr.db.pop_dl_queue(dbclient, urls)
        if os.path.exists('/var/run/grabbr/stop'):
            print(colored('stop file found, exiting', 'yellow', attrs=['bold']))
            os.remove('/var/run/grabbr/stop')
            break
        if config.get('single') is True:
            break
    try:
        os.remove(config['pid_file'])
    except FileNotFoundError:
        pass
else:
    verified_running = False
    for process in psutil.process_iter():
        try:
            if 'chromium' in process.cmdline()[0]:
                continue
            if 'python' in process.cmdline()[0]:
                cmdline = ' '.join(process.cmdline())
                if 'grabbr' in cmdline:
                    if os.getpid() != process.pid:
                        verified_running = True
                        print(colored(
                            'grabbr already running, adding item(s) to the queue',
                            'yellow',
                            attrs=['bold'],
                        ))
        except IndexError:
            pass
    if verified_running is False:
        print(colored('grabbr not found in process list, check /var/run/grabbr/pid', 'red', attrs=['bold']))
    grabbr.tools.queue_urls(urls, dbclient)
